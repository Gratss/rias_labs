import asyncio
import os
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BotCommand
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

NODE_LOADS_FILE = "node_loads.json"

class Node:
    def __init__(self, id, max_load):
        self.id = id
        self.max_load = max_load
        self.load = 0
        self.neighbors = []  # –°–æ—Å–µ–¥–Ω–∏–µ —É–∑–ª—ã
        self.visited = False
        self.message_queue = []

    def update_load(self, amount=1):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É"""
        self.load = min(self.load + amount, self.max_load)

    def decrease_load(self, amount=1):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É"""
        self.load = max(self.load - amount, 0)

    def get_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–∞"""
        return {
            'id': self.id,
            'load': self.load,
            'max_load': self.max_load,
            'neighbors': [n.id for n in self.neighbors]
        }

    def process_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if message['type'] == 'wave':
            self.handle_wave(message)
        elif message['type'] == 'transfer':
            self.handle_transfer(message)

    def handle_wave(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.visited:
            self.visited = True
            self.message_queue.extend(self.create_wave_messages())
            self.message_queue.extend(self.create_transfer_messages())

    def handle_transfer(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        if message['source'] != self.id:
            transfer_amount = message['amount']
            self.decrease_load(transfer_amount)
            self.message_queue.extend(self.create_transfer_messages())

    def create_wave_messages(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–æ–ª–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Å–µ–¥–µ–π"""
        return [{
            'type': 'wave',
            'source': self.id,
            'status': self.get_status()
        } for neighbor in self.neighbors]

    def create_transfer_messages(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        messages = []
        for neighbor in self.neighbors:
            transfer_amount = self.calculate_transfer_amount(neighbor)
            if transfer_amount > 0:
                messages.append({
                    'type': 'transfer',
                    'source': self.id,
                    'target': neighbor.id,
                    'amount': transfer_amount
                })
        return messages

    def calculate_transfer_amount(self, neighbor):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞"""
        max_transfer = (self.load - neighbor.load) // 2
        return min(max_transfer, self.max_load // 4)

async def propagate_wave(node):
    """–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –≤–æ–ª–Ω—É –ø–æ —Å–µ—Ç–∏"""
    try:
        logging.info(f"–ù–∞—á–∞–ª–æ –≤–æ–ª–Ω—ã –æ—Ç —É–∑–ª–∞ {node.id}")
        node.visited = True
        messages = node.create_wave_messages()
        
        for message in messages:
            await process_message(node, message)
            
        while any(node.message_queue for node in NODES):
            for node in NODES:
                while node.message_queue:
                    message = node.message_queue.pop(0)
                    await process_message(node, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ª–Ω—ã: {e}")

async def process_message(node, message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        target_node = next(n for n in NODES if n.id == message['target'])
        target_node.process_message(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def balance_load():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–∑–æ–≤—ã–π –≤–æ–ª–Ω–æ–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–æ–ª–Ω—ã
        source_node = max(NODES, key=lambda node: node.load)
        logging.info(f"–ó–∞–ø—É—Å–∫ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ç —É–∑–ª–∞ {source_node.id}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
        for node in NODES:
            node.visited = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–ª–Ω—É
        await propagate_wave(source_node)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        save_node_loads()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")

async def periodic_balancing():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏"""
    while True:
        try:
            await balance_load()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ: {e}")

@dp.message(Command("node_status"))
async def node_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /node_status"""
    try:
        status_text = "üìä –°—Ç–∞—Ç—É—Å —É–∑–ª–æ–≤:\n\n"
        for node in NODES:
            status = node.get_status()
            status_text += (
                f"–£–∑–µ–ª {status['id']}:\n"
                f"–ó–∞–≥—Ä—É–∑–∫–∞: {status['load']}%\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {status['max_load']}%\n"
                f"–°–æ—Å–µ–¥–∏: {', '.join(map(str, status['neighbors']))}\n\n"
            )
        
        await message.answer(status_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–æ–≤")

def save_node_loads():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —É–∑–ª–æ–≤"""
    try:
        with open(NODE_LOADS_FILE, 'w') as f:
            json.dump({node.id: node.load for node in NODES}, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")

def load_node_loads():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(NODE_LOADS_FILE, 'r') as f:
            loads = json.load(f)
            for node in NODES:
                node.load = loads.get(str(node.id), 0)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏
NODES = [
    Node(0, 100),  # –£–∑–µ–ª 0 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π 100%
    Node(1, 100),  # –£–∑–µ–ª 1 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π 100%
    Node(2, 100)   # –£–∑–µ–ª 2 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π 100%
]

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å–µ—Ç–∏
NODES[0].neighbors = [NODES[1], NODES[2]]
NODES[1].neighbors = [NODES[0], NODES[2]]
NODES[2].neighbors = [NODES[0], NODES[1]]

async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–æ–≤
    load_node_loads()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–∞—Å–∫–µ
    asyncio.create_task(periodic_balancing())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())