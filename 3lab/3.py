import asyncio
import os
import json
import logging
import aiohttp
import base64
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BotCommand, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from datetime import datetime
import random

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
LEAKCHECK_API_KEY = os.getenv("LEAKCHECK_API_KEY")
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")
IPQS_API_KEY = os.getenv("IPQS_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

SUBSCRIBERS_FILE = "subscribers.json"
HISTORY_FILE = "history.json"
NODE_LOADS_FILE = "node_loads.json"

def load_node_loads():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(NODE_LOADS_FILE):
            with open(NODE_LOADS_FILE, "r") as file:
                node_data = json.load(file)
                for node in NODES:
                    node_info = node_data.get(str(node.node_id))
                    if node_info:
                        node.load = node_info["load"]
                        node.last_update = datetime.strptime(
                            node_info["last_update"], "%Y-%m-%d %H:%M:%S"
                        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ —É–∑–ª–æ–≤: {e}")

def save_node_loads():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        node_data = {
            str(node.node_id): {
                "load": node.load,
                "last_update": node.last_update.strftime("%Y-%m-%d %H:%M:%S")
            }
            for node in NODES
        }
        with open(NODE_LOADS_FILE, "w") as file:
            json.dump(node_data, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ —É–∑–ª–æ–≤: {e}")


def load_subscribers():
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, "r") as file:
                return json.load(file)
        return []
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []


def save_subscribers(subscribers):
    try:
        with open(SUBSCRIBERS_FILE, "w") as file:
            json.dump(subscribers, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")


def load_history():
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, "r") as file:
                return json.load(file)
        return {}
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}


def save_history(history):
    try:
        with open(HISTORY_FILE, "w") as file:
            json.dump(history, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")


def add_to_history(user_id: int, data_type: str, value: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id_str = str(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id_str not in history:
            history[user_id_str] = {}
        
        if data_type not in history[user_id_str]:
            history[user_id_str][data_type] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if value not in history[user_id_str][data_type]:
            history[user_id_str][data_type].append(value)
            save_history()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ"""
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é"),
        BotCommand(command="/node_status", description="–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —É–∑–ª–æ–≤"),
        BotCommand(command="/check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç–µ—á–∫—É")
    ]
    await bot.set_my_commands(commands)
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã /start, /status, /node_status –∏ /check")


start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL")],
        [KeyboardButton(text="üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ Email")],
        [KeyboardButton(text="üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
        [KeyboardButton(text="üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ IP")],
        [KeyboardButton(text="üîê 2FA Info")]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def start(message: Message):
    try:
        await message.answer(
            "üîê –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n",
            reply_markup=start_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(lambda message: message.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscribe(message: Message):
    try:
        subscribers = load_subscribers()
        if message.from_user.id not in subscribers:
            subscribers.append(message.from_user.id)
            save_subscribers(subscribers)
            await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—Ç–µ—á–∫–∞—Ö!")
        else:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(lambda message: message.text == "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def unsubscribe(message: Message):
    try:
        subscribers = load_subscribers()
        if message.from_user.id in subscribers:
            subscribers.remove(message.from_user.id)
            save_subscribers(subscribers)
            await message.answer("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("status"))
async def status(message: Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /status –ø–æ–ª—É—á–µ–Ω–∞")
    subscribers = load_subscribers()
    history = load_history()
    user_id_str = str(message.from_user.id)

    is_subscribed = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω—ã" if message.from_user.id in subscribers else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã"

    user_history = history.get(user_id_str, {"email": [], "ip": [], "phone": []})

    email_list = "\n".join(user_history["email"]) if user_history["email"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    ip_list = "\n".join(user_history["ip"]) if user_history["ip"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    phone_list = "\n".join(user_history["phone"]) if user_history["phone"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    response = f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\nüîî –ü–æ–¥–ø–∏—Å–∫–∞: {is_subscribed}\n\nüìß –ò—Å—Ç–æ—Ä–∏—è email:\n{email_list}\n\nüåê –ò—Å—Ç–æ—Ä–∏—è IP:\n{ip_list}\n\nüì± –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n{phone_list}"

    await message.answer(response)


@dp.message(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
async def send_tips(message: Message):
    tips = [
        "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞—Ä–æ–ª–µ–π.",
        "‚úÖ –í–∫–ª—é—á–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA).",
        "‚úÖ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º.",
        "‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç–µ—á–∫–∏.",
        "‚úÖ –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    ]
    await message.answer("\n".join(tips))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (URL, email, —Ç–µ–ª–µ—Ñ–æ–Ω, IP)
@dp.message(lambda message: message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL")
async def check_url(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")


@dp.message(lambda message: message.text == "üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ Email")
async def check_email(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")


@dp.message(lambda message: message.text == "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def check_phone(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")


@dp.message(lambda message: message.text == "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ IP")
async def check_ip(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

class Node:
    def __init__(self, node_id):
        self.node_id = node_id
        self.load = 0  # –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        self.max_load = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        self.last_update = datetime.now()
        self.neighbors = []  # –°–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤
        self.visited = False  # –§–ª–∞–≥ –¥–ª—è –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        self.distance = float('inf')  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞

    def update_load(self, increment=1):
        self.load = min(self.max_load, self.load + increment)
        self.last_update = datetime.now()
        save_node_loads()

    def decrease_load(self, decrement=1):
        self.load = max(0, self.load - decrement)
        self.last_update = datetime.now()
        save_node_loads()

    def get_status(self):
        return {
            'node_id': self.node_id,
            'load': self.load,
            'max_load': self.max_load,
            'last_update': self.last_update.strftime("%Y-%m-%d %H:%M:%S")
        }

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤
NODES = [Node(i) for i in range(3)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
async def initialize_network():
    NODES[0].neighbors = [NODES[1], NODES[2]]
    NODES[1].neighbors = [NODES[0], NODES[2]]
    NODES[2].neighbors = [NODES[0], NODES[1]]

# –í–æ–ª–Ω–æ–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –§–∏–Ω–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ
async def finn_wave_algorithm(source_node):
    logging.info(f"–ó–∞–ø—É—Å–∫ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ç —É–∑–ª–∞ {source_node.node_id}")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
    for node in NODES:
        node.visited = False
        node.distance = float('inf')
    
    source_node.visited = True
    source_node.distance = 0
    
    # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∑–ª–æ–≤
    queue = [source_node]
    
    while queue:
        current_node = queue.pop(0)
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–∞ {current_node.node_id} —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π {current_node.load}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        current_node.update_load()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Å–µ–¥—è–º
        for neighbor in current_node.neighbors:
            if not neighbor.visited:
                neighbor.visited = True
                neighbor.distance = current_node.distance + 1
                queue.append(neighbor)
                logging.info(f"–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É–∑–ª–∞ {current_node.node_id} –∫ —É–∑–ª—É {neighbor.node_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —É —Å–æ—Å–µ–¥–∞
                neighbor.update_load()
                
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–æ–≤
    for node in NODES:
        logging.info(f"–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–∞ {node.node_id}: –Ω–∞–≥—Ä—É–∑–∫–∞ {node.load}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return [node.get_status() for node in NODES]

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
async def make_balancing_decision(node_loads):
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ")
    
    # –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
    max_load_node = max(node_loads, key=lambda x: x['load'])
    logging.info(f"–£–∑–µ–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π: {max_load_node['node_id']} ({max_load_node['load']}%)")
    
    # –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
    min_load_node = min(node_loads, key=lambda x: x['load'])
    logging.info(f"–£–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π: {min_load_node['node_id']} ({min_load_node['load']}%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∑–∞–¥–∞—á—É
    if max_load_node['load'] > 70 and min_load_node['load'] < 30:
        logging.info("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ—Ä–æ–≥–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á–∏")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏
        max_load_node = [node for node in NODES if node.node_id == max_load_node['node_id']][0]
        min_load_node = [node for node in NODES if node.node_id == min_load_node['node_id']][0]
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á—É
        max_load_node.decrease_load(10)
        min_load_node.update_load(10)
        
        logging.info(f"–ü–µ—Ä–µ–Ω–æ—Å 10% –Ω–∞–≥—Ä—É–∑–∫–∏ —Å —É–∑–ª–∞ {max_load_node.node_id} –Ω–∞ —É–∑–µ–ª {min_load_node.node_id}")
        
        return {
            'action': 'transfer',
            'from_node': max_load_node.node_id,
            'to_node': min_load_node.node_id,
            'load_transferred': 10
        }
    else:
        logging.info("–ü–æ—Ä–æ–≥–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã - –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–Ω–æ—Å–µ")
    
    return {'action': 'no_action'}

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
async def periodic_balancing():
    while True:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–∑–µ–ª –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–æ–ª–Ω—ã
            source_node = random.choice(NODES)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–ª–Ω–æ–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
            node_loads = await finn_wave_algorithm(source_node)
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
            decision = await make_balancing_decision(node_loads)
            
            if decision['action'] == 'transfer':
                logging.info(f"–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á–∏ —Å —É–∑–ª–∞ {decision['from_node']} –Ω–∞ —É–∑–µ–ª {decision['to_node']}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ: {e}")
            
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

@dp.message(Command("node_status"))
async def node_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /node_status"""
    try:
        status_text = "üìä –°—Ç–∞—Ç—É—Å —É–∑–ª–æ–≤:\n\n"
        for node in NODES:
            status = node.get_status()
            status_text += (
                f"–£–∑–µ–ª {status['node_id']}:\n"
                f"–ó–∞–≥—Ä—É–∑–∫–∞: {status['load']}%\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status['last_update']}\n\n"
            )
        
        await message.answer(status_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–æ–≤")

async def check_data_breach(email):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç email –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —É—Ç–µ—á–∫–∞—Ö —á–µ—Ä–µ–∑ LeakCheck API"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = min(NODES, key=lambda node: node.load)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ LeakCheck API
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://leakcheck.io/api/v2/search",
                params={"key": LEAKCHECK_API_KEY, "query": email}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("success", False):
                        return {
                            'found': data.get("found", False),
                            'sources': data.get("sources", [])
                        }
                    else:
                        return {'error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ LeakCheck API"}
                else:
                    return {'error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ LeakCheck API"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ç–µ—á–µ–∫: {e}")
        return {'error': str(e)}

@dp.message()
async def handle_data_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if "@" in text:
        await message.answer("üìß –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è email...")
        result = await check_data_breach(text)
        if 'error' in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {result['error']}")
        else:
            if result['found']:
                sources = ", ".join(result['sources'])
                await message.answer(
                    f"‚ö†Ô∏è –≠—Ç–æ—Ç email –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö!\n"
                    f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å!"
                )
            else:
                await message.answer("‚úÖ –≠—Ç–æ—Ç email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        add_to_history(message.from_user.id, "email", text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif text.isdigit() and len(text) >= 10:
        await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    elif text.startswith("http"):
        await message.answer("üåê URL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")
        result = await check_url_virustotal(text)
        
        if isinstance(result, dict):
            if result['malicious']:
                await message.answer(
                    f"‚ö†Ô∏è URL –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º!\n"
                    f"–†–µ–ø—É—Ç–∞—Ü–∏—è: {result['reputation']}%\n"
                    f"–ü—Ä–æ–≤–µ—Ä–æ–∫: {result['total_checks']}\n"
                    f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {result['positive_checks']}"
                )
            else:
                await message.answer(
                    f"‚úÖ URL –±–µ–∑–æ–ø–∞—Å–µ–Ω\n"
                    f"–†–µ–ø—É—Ç–∞—Ü–∏—è: {result['reputation']}%\n"
                    f"–ü—Ä–æ–≤–µ—Ä–æ–∫: {result['total_checks']}\n"
                    f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {result['positive_checks']}"
                )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        add_to_history(message.from_user.id, "url", text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
    elif text.count(".") == 3 and all(part.isdigit() for part in text.split(".")):               
        await message.answer("üìç IP –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")
        result = await check_ip_reputation(text)
        
        if isinstance(result, dict):
            if result['fraud_score'] > 50:
                await message.answer(
                    f"‚ö†Ô∏è IP-–∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º!\n"
                    f"–û—Ü–µ–Ω–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {result['fraud_score']}%\n"
                    f"–ü—Ä–æ–∫—Å–∏: {'–î–∞' if result['is_proxy'] else '–ù–µ—Ç'}\n"
                    f"TOR: {'–î–∞' if result['is_tor'] else '–ù–µ—Ç'}\n"
                    f"–ë–æ—Ç: {'–î–∞' if result['is_bot'] else '–ù–µ—Ç'}"
                )
            else:
                await message.answer(
                    f"‚úÖ IP-–∞–¥—Ä–µ—Å –±–µ–∑–æ–ø–∞—Å–µ–Ω\n"
                    f"–û—Ü–µ–Ω–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {result['fraud_score']}%\n"
                    f"–ü—Ä–æ–∫—Å–∏: {'–î–∞' if result['is_proxy'] else '–ù–µ—Ç'}\n"
                    f"TOR: {'–î–∞' if result['is_tor'] else '–ù–µ—Ç'}\n"
                    f"–ë–æ—Ç: {'–î–∞' if result['is_bot'] else '–ù–µ—Ç'}"
                )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        add_to_history(message.from_user.id, "ip", text)
    
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

async def check_url_virustotal(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ VirusTotal API"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = min(NODES, key=lambda node: node.load)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal API
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://www.virustotal.com/api/v3/urls/{url}",
                headers={"x-apikey": VIRUSTOTAL_API_KEY}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    stats = data.get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
                    total = sum(stats.values())
                    malicious = stats.get("malicious", 0)
                    suspicious = stats.get("suspicious", 0)
                    
                    return {
                        'malicious': malicious > 0,
                        'reputation': int((1 - (malicious + suspicious) / total) * 100) if total > 0 else 100,
                        'total_checks': total,
                        'positive_checks': malicious + suspicious
                    }
                else:
                    return {
                        'malicious': False,
                        'reputation': 0,
                        'total_checks': 0,
                        'positive_checks': 0
                    }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: {e}")
        return {
            'malicious': False,
            'reputation': 0,
            'total_checks': 0,
            'positive_checks': 0
        }

async def check_ip_reputation(ip_address):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ IPQS API"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = min(NODES, key=lambda node: node.load)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ IPQS API
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://ipqs.io/ip-api/json/{ip_address}",
                params={"key": IPQS_API_KEY}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("success", False):
                        return {
                            'fraud_score': data.get("fraud_score", 0),
                            'is_proxy': data.get("proxy", False),
                            'is_tor': data.get("tor", False),
                            'is_bot': data.get("bot", False)
                        }
                    else:
                        return {
                            'fraud_score': 100,
                            'is_proxy': True,
                            'is_tor': True,
                            'is_bot': True
                        }
                else:
                    return {
                        'fraud_score': 100,
                        'is_proxy': True,
                        'is_tor': True,
                        'is_bot': True
                    }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP: {e}")
        return {
            'fraud_score': 100,
            'is_proxy': True,
            'is_tor': True,
            'is_bot': True
        }

        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        node.decrease_load()
        save_node_loads()
        
        return result_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞"

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç—å
    await initialize_network()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–∞—Å–∫–µ
    asyncio.create_task(periodic_balancing())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
