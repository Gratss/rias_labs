import asyncio
import random
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —É–∑–ª–∞ (—Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏)
class Node:
    def __init__(self, node_id):
        self.node_id = node_id
        self.load = 0  # –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        self.lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è load

    async def process_request(self, request_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        async with self.lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ load, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
            self.load += 1

        await asyncio.sleep(random.uniform(1, 3))  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        async with self.lock:
            self.load -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        return f"‚úÖ Node {self.node_id} –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å: {request_data} (Load: {self.load})"

    def get_load(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É —É–∑–ª–∞."""
        return self.load

# –ö–ª–∞—Å—Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
class LoadBalancer:
    def __init__(self, nodes):
        self.nodes = nodes  # –°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤

    def select_node(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π."""
        min_load = min(node.get_load() for node in self.nodes)  # –ò—â–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        available_nodes = [node for node in self.nodes if node.get_load() == min_load]  # –£–∑–ª—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        selected_node = random.choice(available_nodes)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —É–∑–ª–æ–≤
        
        print(f"üîÄ –í—ã–±—Ä–∞–Ω —É–∑–µ–ª: Node {selected_node.node_id} (Load: {selected_node.get_load()})")  
        return selected_node

    async def handle_request(self, request_data):
        """–í—ã–±–∏—Ä–∞–µ—Ç —É–∑–µ–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –∑–∞–ø—Ä–æ—Å."""
        node = self.select_node()
        return await node.process_request(request_data)

# –°–æ–∑–¥–∞—ë–º 3 —É–∑–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
nodes = [Node(i) for i in range(3)]
balancer = LoadBalancer(nodes)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check
@dp.message(Command("check"))
async def check_request(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /check - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏."""
    await message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    response = await balancer.handle_request("–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
