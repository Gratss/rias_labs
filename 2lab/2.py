import asyncio
import os
import json
import logging
import aiohttp
import base64
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BotCommand, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
LEAKCHECK_API_KEY = os.getenv("LEAKCHECK_API_KEY")
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")
IPQS_API_KEY = os.getenv("IPQS_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

SUBSCRIBERS_FILE = "subscribers.json"
HISTORY_FILE = "history.json"
NODE_LOADS_FILE = "node_loads.json"

def load_node_loads():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(NODE_LOADS_FILE):
            with open(NODE_LOADS_FILE, "r") as file:
                node_data = json.load(file)
                for node in NODES:
                    node_info = node_data.get(str(node.node_id))
                    if node_info:
                        node.load = node_info["load"]
                        node.last_update = datetime.strptime(
                            node_info["last_update"], "%Y-%m-%d %H:%M:%S"
                        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ —É–∑–ª–æ–≤: {e}")

def save_node_loads():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        node_data = {
            str(node.node_id): {
                "load": node.load,
                "last_update": node.last_update.strftime("%Y-%m-%d %H:%M:%S")
            }
            for node in NODES
        }
        with open(NODE_LOADS_FILE, "w") as file:
            json.dump(node_data, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ —É–∑–ª–æ–≤: {e}")


def load_subscribers():
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, "r") as file:
                return json.load(file)
        return []
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []


def save_subscribers(subscribers):
    try:
        with open(SUBSCRIBERS_FILE, "w") as file:
            json.dump(subscribers, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")


def load_history():
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, "r") as file:
                return json.load(file)
        return {}
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}


def save_history(history):
    try:
        with open(HISTORY_FILE, "w") as file:
            json.dump(history, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")


def add_to_history(user_id, data_type, value):
    history = load_history()
    user_id_str = str(user_id)

    if user_id_str not in history:
        history[user_id_str] = {"email": [], "ip": [], "phone": []}

    if value not in history[user_id_str][data_type]:
        history[user_id_str][data_type].append(value)

    save_history(history)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ"""
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é"),
        BotCommand(command="/node_status", description="–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —É–∑–ª–æ–≤"),
        BotCommand(command="/check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç–µ—á–∫—É")
    ]
    await bot.set_my_commands(commands)
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã /start, /status, /node_status –∏ /check")


start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL")],
        [KeyboardButton(text="üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ Email")],
        [KeyboardButton(text="üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
        [KeyboardButton(text="üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ IP")],
        [KeyboardButton(text="üîê 2FA Info")]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def start(message: Message):
    try:
        await message.answer(
            "üîê –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n",
            reply_markup=start_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(lambda message: message.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscribe(message: Message):
    try:
        subscribers = load_subscribers()
        if message.from_user.id not in subscribers:
            subscribers.append(message.from_user.id)
            save_subscribers(subscribers)
            await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—Ç–µ—á–∫–∞—Ö!")
        else:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(lambda message: message.text == "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def unsubscribe(message: Message):
    try:
        subscribers = load_subscribers()
        if message.from_user.id in subscribers:
            subscribers.remove(message.from_user.id)
            save_subscribers(subscribers)
            await message.answer("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("status"))
async def status(message: Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /status –ø–æ–ª—É—á–µ–Ω–∞")
    subscribers = load_subscribers()
    history = load_history()
    user_id_str = str(message.from_user.id)

    is_subscribed = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω—ã" if message.from_user.id in subscribers else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã"

    user_history = history.get(user_id_str, {"email": [], "ip": [], "phone": []})

    email_list = "\n".join(user_history["email"]) if user_history["email"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    ip_list = "\n".join(user_history["ip"]) if user_history["ip"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    phone_list = "\n".join(user_history["phone"]) if user_history["phone"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    response = f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\nüîî –ü–æ–¥–ø–∏—Å–∫–∞: {is_subscribed}\n\nüìß –ò—Å—Ç–æ—Ä–∏—è email:\n{email_list}\n\nüåê –ò—Å—Ç–æ—Ä–∏—è IP:\n{ip_list}\n\nüì± –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n{phone_list}"

    await message.answer(response)


@dp.message(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
async def send_tips(message: Message):
    tips = [
        "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞—Ä–æ–ª–µ–π.",
        "‚úÖ –í–∫–ª—é—á–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA).",
        "‚úÖ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º.",
        "‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç–µ—á–∫–∏.",
        "‚úÖ –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    ]
    await message.answer("\n".join(tips))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (URL, email, —Ç–µ–ª–µ—Ñ–æ–Ω, IP)
@dp.message(lambda message: message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL")
async def check_url(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")


@dp.message(lambda message: message.text == "üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ Email")
async def check_email(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")


@dp.message(lambda message: message.text == "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def check_phone(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")


@dp.message(lambda message: message.text == "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ IP")
async def check_ip(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

class Node:
    def __init__(self, node_id):
        self.node_id = node_id
        self.load = 0  # –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        self.max_load = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        self.last_update = datetime.now()

    def update_load(self, increment=1):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ"""
        self.load += increment
        if self.load > self.max_load:
            self.load = self.max_load
        self.last_update = datetime.now()

    def decrease_load(self, decrement=1):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ"""
        self.load -= decrement
        if self.load < 0:
            self.load = 0
        self.last_update = datetime.now()

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–∑–ª–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        return {
            "node_id": self.node_id,
            "current_load": self.load,
            "max_load": self.max_load,
            "last_update": self.last_update.strftime("%Y-%m-%d %H:%M:%S")
        }

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤
NODES = [Node(i) for i in range(3)]

def select_node():
    """–í—ã–±–∏—Ä–∞–µ—Ç —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    return min(NODES, key=lambda node: node.load)

@dp.message(Command("node_status"))
async def node_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /node_status"""
    try:
        status_text = "üìä –°—Ç–∞—Ç—É—Å —É–∑–ª–æ–≤:\n\n"
        for node in NODES:
            status = node.get_status()
            status_text += (
                f"–£–∑–µ–ª {status['node_id']}:\n"
                f"–ó–∞–≥—Ä—É–∑–∫–∞: {status['current_load']}%\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status['last_update']}\n\n"
            )
        
        await message.answer(status_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–æ–≤")

async def check_data_breach(email):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç email –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —É—Ç–µ—á–∫–∞—Ö"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = select_node()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LeakCheck API
        url = f"https://leakcheck.io/api?key={LEAKCHECK_API_KEY}&check={email}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("success") and data.get("found"):
                        return True
                    return False
                else:
                    logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email")
                    return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email: {e}")
        return False

@dp.message(lambda message: message.text)
async def handle_data_input(message: Message):
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if "@" in text:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = select_node()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        is_breached = await check_data_breach(text)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        node.decrease_load()
        save_node_loads()
        
        if is_breached:
            await message.answer(f"‚ö†Ô∏è –≠—Ç–æ—Ç email –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫!")
        else:
            await message.answer(f"‚úÖ Email {text} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif text.isdigit() and len(text) >= 10:
        await message.answer("ÔøΩ –¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    elif text.startswith("http"):
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = select_node()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        safety_message = await check_url_virustotal(text)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        node.decrease_load()
        save_node_loads()
        
        await message.answer(safety_message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
    elif text.count(".") == 3 and all(part.isdigit() for part in text.split(".")):
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = select_node()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        result = await check_ip_reputation(text)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        node.decrease_load()
        save_node_loads()
        
        await message.answer(result)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ VirusTotal API
async def check_url_virustotal(url):
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = select_node()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        async with aiohttp.ClientSession() as session:
            url = f"https://www.virustotal.com/api/v3/urls"
            headers = {"x-apikey": VIRUSTOTAL_API_KEY}
            data = {"url": url}
            
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get("data", {}).get("attributes", {}).get("last_analysis_stats", {}).get("malicious") > 0:
                        result_text = "‚ö†Ô∏è URL –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º!"
                    else:
                        result_text = "‚úÖ URL –±–µ–∑–æ–ø–∞—Å–µ–Ω"
                else:
                    result_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL"

        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        node.decrease_load()
        save_node_loads()
        
        return result_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ IPQS API
async def check_ip_reputation(ip_address):
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        node = select_node()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —É–∑–ª–µ
        node.update_load()
        
        async with aiohttp.ClientSession() as session:
            url = f"https://ipqualityscore.com/api/json/ip/{IPQS_API_KEY}/{ip_address}"
            
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get("success", False):
                        risk = data.get("fraud_score", 0)
                        if risk > 80:
                            result_text = f"‚ùå IP-–∞–¥—Ä–µ—Å {ip_address} –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {risk}/100."
                        elif risk > 50:
                            result_text = f"‚ö†Ô∏è IP-–∞–¥—Ä–µ—Å {ip_address} –∏–º–µ–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {risk}/100."
                        else:
                            result_text = f"‚úÖ IP-–∞–¥—Ä–µ—Å {ip_address} –±–µ–∑–æ–ø–∞—Å–µ–Ω: {risk}/100."
                    else:
                        result_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞"
                else:
                    result_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞"

        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        node.decrease_load()
        save_node_loads()
        
        return result_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞"

async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await set_bot_commands()
    logging.info("–ë–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã.")
    await dp.start_polling(bot)


# –ê–ª–≥–æ—Ä–∏—Ç–º "–≠—Ö–æ"
async def echo_algorithm(node_id, load_data):
    """–ò–º–∏—Ç–∞—Ü–∏—è –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ '–≠—Ö–æ' –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ —É–∑–ª–æ–≤"""
    node_loads = load_node_loads()
    node_loads[node_id] = load_data
    save_node_loads(node_loads)
    logging.info(f"–°–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ —É–∑–ª–∞ {node_id}: {load_data}")

    # –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
    await make_balancing_decision(node_loads)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
async def make_balancing_decision(node_loads):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ"""
    # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: –ø–µ—Ä–µ–Ω–æ—Å–∏–º –æ–±—ä–µ–∫—Ç —Å —Å–∞–º–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –Ω–∞ –º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
    sorted_nodes = sorted(node_loads.items(), key=lambda x: x[1], reverse=True)
    most_loaded_node = sorted_nodes[0]
    least_loaded_node = sorted_nodes[-1]

    # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
    logging.info(f"–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: –ø–µ—Ä–µ–Ω–æ—Å –æ–±—ä–µ–∫—Ç–∞ —Å —É–∑–ª–∞ {most_loaded_node[0]} –Ω–∞ —É–∑–µ–ª {least_loaded_node[0]}")
    
    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
    await bot.send_message(most_loaded_node[0], f"üîÑ –í–∞—à —É–∑–µ–ª –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω.")
    await bot.send_message(least_loaded_node[0], f"üíª –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main())
